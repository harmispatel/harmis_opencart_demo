import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:harmis_opencart/utils/constant.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
  GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get welcomeTo => "Welcome To";
  String get test => "Test english";
  String get title => "Sawers Bolivia";
  String get or => "OR";
  String get email => "Email";
  String get password => "Password";
  String get notHave => "Not Have Account? Sign Up";
  String get login => "Login";
  String get loginFacebook => "Login With Facebook";
  String get loginGoogle => "Login With Google";
  String get welcome => "Welcome";
  String get pleaseInput => "Please input fill in all fields";
  String get home => "Home";
  String get brand => "Brand";
  String get cart => "Cart";
  String get account => "Account";
  String get firstname => "Firstname";
  String get lastName => "Lastname";
  String get phone => "Phone";
  String get signUp => "Signup";
  String get weekPromotion => "Best Sellers";
  String get category => "Category";
  String get subCategory => "Sub Category";
  String get cartNoItem => "Not Have Item";
  String get cartArchiveText => "Archive";
  String get cartArchice => "Items Cart Archive";
  String get cartDelete => "Delete";
  String get cartDeleted => "Items Cart Deleted";
  String get cartPay => "Pay";
  String get cartTotal => "Total";
  String get name => "Alisa Hearth";
  String get editProfile => "Edit Profile";
  String get notification => "Notification";
  String get payments => "Payments";
  String get message => "Message";
  String get myOrders => "My Orders";
  String get settingAccount => "Setting Account";
  String get callCenter => "Call Center";
  String get language => "Language";
  String get aboutApps => "About Apps";
  String get addToCart => "Add to cart";
  String get description => "Description";
  String get productDetails => "Product Details";
  String get passwordNotSame => "Password and confirm password not same";
  String get addAddress => "Add Address";
  String get whereOrder => "Where your order items shipped ?";
  String get goToPayment => "Go To Payment";
  String get search => "Search";
  String get searchHello => "Hello, i am Sawers Bolivia. What would you like to search ?";
  String get findYouWant => "Find you want";
  String get uiKit => "UI KIT E-Commerce";
  String get categoryBrand => "Category Brand";
  String get callCenter1 => "We're Happy to Help You!";
  String get callCenter2 => "If you have complain about \nthe product chat me";
  String get callCenter3 => "Call Me";
  String get changePassword => "Change Password";
  String get confirmPassword => "Confirm Password";
  String get save => "Save";
  String get languageSetting => "Language";
  String get titleCard => "Change Language?";
  String get descCard => "Are you sure you want to change this language setting?";
  String get english => "English";
  String get arabic => "Arabic";
  String get chinese => "Chinese";
  String get hindi => "Hindi";
  String get indonesia => "Indonesia";
  String get notHaveNotification => "Not Have Notification";
  String get address => "Address";
  String get telephone => "Telephone";
  String get logout => "Logout";
  String get availableOptions => "Available Options";
  String get chooseAvailableOptions => "Please choose Available Options";
  String get profile => "Profile";
  String get camera => "Camera";
  String get gallery => "Gallery";
  String get recomended => "Recomended";
  String get orderNo => "Order No";
  String get items => "Items";
  String get placeOn => "Place on";
  String get currencyIcone => "Bs";
  String get orderSummary => "Order Summary";
  String get placeOrder => "Place Order";
  String get itemAmount => "Item Amount";
  String get totalQuantity => "Total Quantity";
  String get shippingAmount => "Shipping Amount";
  String get couponDiscount => "Coupon Discount";
  String get shippingAddress => "Shipping Address";
  String get paymentAddress => "Payment Address";
  String get payment => "Payment";
  String get addComment => "Add Comment";
  String get couponCode => "Coupon Code";
  String get apply => "Apply";
  String get next => "Next";
  String get orderDetails => "Order Details";
  String get thanksMessage => "If you have any queries, please call the mobile or phone numbers on the website contact us.\\nYou can view your order history by going to the my account page and by clicking on history.";
  String get thank_you => "Thank you for shopping with us.";
  String get deliveryAddress => "Delivery Address";
  String get city => "City";
  String get enter_city => "Please enter city";
  String get chooseAddress => "Please select address";
  String get ordeNo => "Orde No";
  String get invoice => "Invoice";
  String get paymentMethod => "Payment method";
  String get orderStatus => "Order Status";
  String get affiliate => "Affiliate";
  String get updateSentTo => "Updates sent to";
  String get edit => "Edit";
  String get cashOnDelivery => "Cash on delivery";
  String get favorites => "Favorites";
  String get addToFavorite => "Add to favorite";
  String get noInternet => "No internet available.!";
  String get logoutConfirmationMessage => "Are you sure want to logout.?";
  String get yes => "Yes";
  String get no => "No";

}

class $es extends S {
  const $es();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get welcomeTo => "Bienvenido a";
  String get test => "Prueba de español";
  String get title => "Sawers Bolivia";
  String get or => "O";
  String get email => "Email";
  String get password => "Password";
  String get notHave => "No tienes cuenta? Registrate";
  String get login => "Iniciar sesión";
  String get loginFacebook => "Ingresar con Facebook";
  String get loginGoogle => "Ingresar con Google";
  String get welcome => "Bienvenido";
  String get pleaseInput => "Favor de llenar todos los campos";
  String get home => "Inicio";
  String get brand => "Marca";
  String get cart => "Cesta";
  String get account => "Cuenta";
  String get firstname => "Nombre";
  String get lastName => "Apellido";
  String get phone => "Celular";
  String get signUp => " Regístrate ";
  String get weekPromotion => "Más Vendidos";
  String get category => "Categoría";
  String get subCategory => "Sub Categoría";
  String get cartNoItem => "No hay artículos";
  String get cartArchiveText => "Archivo";
  String get cartArchice => "Archivo de Cesta de Productos";
  String get cartDelete => "Borrar";
  String get cartDeleted => "Cesta de Productos Eliminado";
  String get cartPay => "Pagar";
  String get cartTotal => "Total";
  String get name => "Miguel Ramirez";
  String get editProfile => "Editar Perfil";
  String get notification => "Notificación";
  String get payments => "Pagos";
  String get message => "Mensaje";
  String get myOrders => "Mis Pedidos";
  String get settingAccount => "Configurar Cuenta";
  String get callCenter => "Centro de Llamadas";
  String get language => "Idioma";
  String get aboutApps => "Sobre la App";
  String get addToCart => "Agregar a Cesta";
  String get description => "Descripción";
  String get productDetails => "Detalles del Producto";
  String get passwordNotSame => "Password y confirmar password no coinciden";
  String get addAddress => "Agregar Dirección ";
  String get whereOrder => "Donde se enviarán tus productos?";
  String get goToPayment => "Ir al Pago";
  String get search => "Buscar";
  String get searchHello => "Hola, somos Sawers Bolivia. Que te gustaría buscar?";
  String get findYouWant => "Encuentra lo que quieres";
  String get uiKit => "UI KIT E-Commerce";
  String get categoryBrand => "Categoría Marca";
  String get callCenter1 => "Estamos felices de ayudarte!";
  String get callCenter2 => "Si tienes dudas de un \nproducto, contactanos";
  String get callCenter3 => " Llámanos";
  String get changePassword => "Cambiar Password";
  String get confirmPassword => "Confirmar Password";
  String get save => "Guardar";
  String get languageSetting => "Idioma";
  String get titleCard => "Cambiar Idioma?";
  String get descCard => "Esta Seguro de cambiar el Idioma?";
  String get english => "English";
  String get arabic => "Arabic";
  String get chinese => "Chinese";
  String get hindi => "Hindi";
  String get indonesia => "Indonesia";
  String get notHaveNotification => "No tiene notificaciones";
  String get address => "Dirección";
  String get telephone => "Celular";
  String get logout => "Cerrar Sesión";
  String get availableOptions => "Opciones Disponibles";
  String get chooseAvailableOptions => "Favor de elegir las Opciones Disponibles";
  String get profile => "Perfil";
  String get camera => "Camára";
  String get gallery => "Galería";
  String get recomended => "Recomendado";
  String get orderNo => "Pedido No";
  String get items => "Productos";
  String get placeOn => "Colocar en";
  String get currencyIcone => "Bs";
  String get orderSummary => "Resumen del Pedido";
  String get placeOrder => "Realizar Pedido";
  String get itemAmount => "Cantidad de Productos";
  String get totalQuantity => "Cantidad Total";
  String get shippingAmount => "Cantidad de Envío";
  String get couponDiscount => "Cupón de Descuento";
  String get shippingAddress => "Dirección de Envío";
  String get paymentAddress => "Dirección de Pago";
  String get payment => "Pago";
  String get addComment => "Agregar Comentario";
  String get couponCode => "Codigo de Cupón";
  String get apply => "Aplicar";
  String get next => "Siguiente";
  String get orderDetails => "Detalle del Pedido";
  String get thanksMessage => " Si tiene alguna consulta, llame al número de teléfono móvil o en el sitio web contáctenos.\\nPuede ver su historial de pedidos en la página de mi cuenta, haciendo clic en historial.";
  String get thank_you => "Gracias por comprar con nosotros.";
  String get deliveryAddress => "Dirección de entrega";
  String get city => "Ciudad";
  String get enter_city => "Ingrese la Ciudad";
  String get chooseAddress => "Seleccione una Dirección";
  String get ordeNo => "Pedido No";
  String get invoice => "Factura";
  String get paymentMethod => "Método de pago";
  String get orderStatus => "Estado del Pedido";
  String get affiliate => "Afiliado";
  String get updateSentTo => "Actualizaciones enviadas a";
  String get edit => "Editar";
  String get cashOnDelivery => "Pagar al recoger";
  String get favorites => "Favoritos";
  String get addToFavorite => "Agregar a Favoritos";
  String get noInternet => "No hay internet disponible.!";
  String get logoutConfirmationMessage => "¿Seguro que quieres cerrar sesión?";
  String get yes => "Sí";
  String get no => "No";

}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale(AppConstants.LANGUAGE_ENGLISH, ""),
      Locale(AppConstants.LANGUAGE_SPANISH, ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case AppConstants.LANGUAGE_SPANISH:
          S.current = const $es();
          return SynchronousFuture<S>(S.current);
        case AppConstants.LANGUAGE_ENGLISH:
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
// NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
// Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

// If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

// If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();